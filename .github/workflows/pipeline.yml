# name: Testing CICD

# on:
#   push:
#     branches: [ "production" ]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: self-hosted

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: Install dependencies
#         run: npm install

#       - name: Build Docker image
#         run: docker build -t testing .

#       - name: Save Docker image to file
#         run: docker save testing -o testing.tar

#       - name: Show size of Docker image file
#         run: du -h testing.tar

#       - name: Archive Docker image file
#         run: tar -czf testing.tar.gz testing.tar

#       - name: Show size of archived Docker image file
#         run: du -h testing.tar.gz

#       - name: Upload Docker image file
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: testing.tar.gz

#   deploy:
#     runs-on: self-hosted
#     needs: build

#     steps:
#       - name: Download Docker image file
#         uses: actions/download-artifact@v4
#         with:
#           name: docker-image
#           path: ~/

#       - name: Extract Docker image file
#         run: |
#           mkdir -p extracted-image
#           tar -xzf ~/testing.tar.gz -C extracted-image

#       - name: Check contents of extracted image directory
#         run: ls -l extracted-image/

#       - name: Set permissions for extracted image
#         run: chmod -R 755 extracted-image/

#       - name: Copy Docker image to EC2
#         uses: appleboy/scp-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           source: "extracted-image/"
#           target: "~/docker-image"
#           timeout: 60s
#           command_timeout: 20m

#       - name: SSH to EC2 and load Docker image
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           port: 22
#           script_stop: true
#           script: |
#             cd ~/docker-image/extracted-image
#             docker load -i testing.tar
#             docker stop testing || true
#             docker rm testing || true
#             docker run -d --name testing -p 3000:3000 testing

#       - name: Debug Docker container status
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           port: 22
#           script_stop: false
#           script: |
#             docker ps -a
#             docker logs testing || true

#       - name: Check disk usage after deployment
#         run: df -h

name: Testing CICD

on:
  push:
    branches: [ "production" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/testing:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/testing:latest

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - name: SSH to EC2 and deploy Docker image
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            # Log in to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/testing:latest

            # Stop and remove any existing container
            docker stop testing || true
            docker rm testing || true

            # Start the new container
            docker run -d --name testing -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/testing:latest

      - name: Check disk usage after deployment
        run: df -h
